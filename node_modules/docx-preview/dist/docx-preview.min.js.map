{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/document.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/parser/common.ts","webpack://docx/./src/html-renderer.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DomType","DomRelationshipType","document_1","document_parser_1","html_renderer_1","renderAsync","data","bodyContainer","styleContainer","options","parser","DocumentParser","renderer","HtmlRenderer","document","__assign","ignoreHeight","ignoreWidth","debug","className","inWrapper","Document","load","then","doc","render","PartType","this","zip","JSZip","docRelations","fontRelations","numRelations","styles","fonts","numbering","blob","loadAsync","z","files","loadPart","DocumentRelations","FontRelations","NumberingRelations","Style","Numbering","Promise","all","filter","x","loadDocumentImage","id","loadResource","loadNumberingImage","loadFont","relations","rel","length","resolve","target","async","part","_this","f","xml","parseDocumentRelationsFile","parseStylesFile","parseNumberingFile","parseDocumentFile","dom_1","utils","common_1","common_2","autos","shd","color","highlight","SizeType","skipDeclaration","xmlString","xrels","parse","elements","map","stringAttr","type","values","valueOfRelType","result","domType","children","style","props","xbody","byTagName","foreach","elem","localName","push","parseParagraph","parseTable","parseSectionProperties","xstyles","parseStyle","parseDefaultStyles","node","basedOn","rPr","parseDefaultProperties","pPr","parseCommonProperties","namespaceURI","namespaces","wordml","getAttributeColorValue","fontSize","getAttributeLengthValue","LengthUsage","FontSize","isDefault","boolAttr","linked","aliases","split","_i","_a","parseTableStyle","console","warn","selector","xnums","mapping","bullets","parseAbstractNumbering","forEach","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","parseNumberingLevel","level","bullet","levelText","format","section","forEachElementNS","e","pageSize","width","height","orientation","getAttributeNS","pageMargins","left","right","top","bottom","header","footer","gutter","columns","parseColumns","numberOfColumns","getAttributeIntValue","space","separator","getAttributeBoolValue","equalWidth","Paragraph","parseRun","parseHyperlink","parseBookmark","parseParagraphProperties","paragraph","addElementClass","classNameOfCnfStyle","parseNumbering","parseFrame","parseTabs","numberingId","numberingLevel","Run","parent","Hyperlink","anchor","href","text","textContent","break","tab","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","parseTableColumns","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","start","end","before","after","line","lineRule","toFixed","tabs","position","leader","output","valueOfBorder","replace","DOMParser","parseFromString","firstChild","tagName","childNodes","nodeType","cb","nodeName","attrName","attributes","attr","item","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","Border","Percent","Settings","Theme","StylesWithEffects","Styles","FontTable","WebSettings","Unknown","trim","a","b","checkMask","num","mask","appendClass","classList","element","parseLength","usage","callback","defaultValue","htmlDocument","digitTest","test","clearElement","appendChild","createComment","renderDefaultStyle","renderStyles","renderNumbering","documentElement","renderDocument","renderWrapper","removeChild","processClassName","processStyles","stylesMap","_b","_c","baseStyle","baseValues","styleValues","this_1","copyStyleProperties","_d","_e","_f","styles_1","processElement","processTable","input","attrs","getOwnPropertyNames","attrs_1","bodyElement","createElement","renderChildren","renderStyleValues","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","columnCount","columnGap","columnRule","styleText","renderStyle","listStyleType","rootCounters","this_2","numberingClass","counter","numberingCounter","styleToString","counter-reset","content","levelTextToContent","counter-increment","display","list-style-position","list-style-type","valiable_1","toLowerCase","background","numFormatToCssValue","styles_2","join","styleContent","styleElement","innerHTML","styles_3","subStyles","linkedStyle","concat","subStyles_1","subStyle","renderElement","renderParagraph","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","into","result_1","renderClass","renderCommonProeprties","textIndent","link","renderTableColumns","columns_1","colElem","colSpan","ouput","lvl","selectors","cssText","substring","none","decimal","lowerLetter","upperLetter","lowerRoman","upperRoman"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory();\n\telse\n\t\troot[\"docx\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export enum DomType {\r\n    Document,\r\n    Paragraph,\r\n    Run,\r\n    Break,\r\n    Table,\r\n    Row,\r\n    Cell,\r\n    Hyperlink,\r\n    Drawing,\r\n    Image\r\n}\r\n\r\nexport enum DomRelationshipType {\r\n    Settings,\r\n    Theme,\r\n    StylesWithEffects,\r\n    Styles,\r\n    FontTable,\r\n    Image,\r\n    WebSettings,\r\n    Unknown\r\n}\r\n\r\nexport interface IDomRelationship {\r\n    id: string;\r\n    type: DomRelationshipType;\r\n    target: string;\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    domType: DomType;\r\n    children?: OpenXmlElement[];\r\n    style?: IDomStyleValues;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface DocxTab {\r\n    style: string;\r\n    leader: string;\r\n    position: string;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface IDomRun extends OpenXmlElement {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    text?: string;\r\n    href?: string;\r\n    tab?: boolean;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomStyle {\r\n    id: string;\r\n    name?: string;\r\n    aliases?: string[];\r\n    target: string;\r\n    basedOn?: string;\r\n    isDefault?: boolean;\r\n    styles: IDomSubStyle[];\r\n    linked?: string;\r\n}\r\n\r\nexport interface IDomSubStyle {\r\n    target: string;\r\n    values: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: IDomStyleValues;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n\r\nexport interface IDomStyleValues {\r\n    [name: string]: string;\r\n}\r\n","import { Document } from './document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    debug: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Partial<Options> = null): PromiseLike<any> {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    options = { \r\n        ignoreHeight: true,\r\n        ignoreWidth: false,\r\n        debug: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... options\r\n    };\r\n\r\n    if (options) {\r\n        options.ignoreWidth = options.ignoreWidth || parser.ignoreWidth;\r\n        options.ignoreHeight = options.ignoreHeight || parser.ignoreHeight;\r\n        parser.debug = options.debug || parser.debug;\r\n\r\n        renderer.className = options.className || \"docx\";\r\n        renderer.inWrapper = options.inWrapper != null ? options.inWrapper : true;\r\n    }\r\n\r\n    return Document.load(data, parser)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer, options);\r\n            return doc;\r\n        });\r\n}","import { DocumentParser } from './document-parser';\r\nimport { IDomRelationship, IDomStyle, IDomNumbering } from './dom/dom';\r\nimport { Font } from './dom/common';\r\nimport { DocumentElement } from './dom/document';\r\n\r\nenum PartType {\r\n    Document = \"word/document.xml\",\r\n    Style = \"word/styles.xml\",\r\n    Numbering = \"word/numbering.xml\",\r\n    DocumentRelations = \"word/_rels/document.xml.rels\",\r\n    NumberingRelations = \"word/_rels/numbering.xml.rels\",\r\n    FontRelations = \"word/_rels/fontTable.xml.rels\",\r\n}\r\n\r\nexport class Document {\r\n    private zip: JSZip = new JSZip();\r\n\r\n    docRelations: IDomRelationship[] = null;\r\n    fontRelations: IDomRelationship[] = null;\r\n    numRelations: IDomRelationship[] = null;\r\n\r\n    styles: IDomStyle[] = null;\r\n    fonts: Font[] = null;\r\n    numbering: IDomNumbering[] = null;\r\n    document: DocumentElement = null;\r\n\r\n    static load(blob, parser: DocumentParser): PromiseLike<Document> {\r\n        var d = new Document();\r\n\r\n        return d.zip.loadAsync(blob).then(z => {\r\n            var files = [\r\n                d.loadPart(PartType.DocumentRelations, parser),\r\n                d.loadPart(PartType.FontRelations, parser),\r\n                d.loadPart(PartType.NumberingRelations, parser),\r\n                d.loadPart(PartType.Style, parser),\r\n                d.loadPart(PartType.Numbering, parser),\r\n                d.loadPart(PartType.Document, parser)\r\n            ];\r\n\r\n            return Promise.all(files.filter(x => x != null)).then(x => d);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.docRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\r\n    }\r\n\r\n    loadFont(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontRelations, id)\r\n            .then(x => x ? (\"data:application/vnd.ms-package.obfuscated-opentype;charset=utf-8;base64,\" + x) : null);\r\n    }\r\n\r\n    private loadResource(relations: IDomRelationship[], id: string) {\r\n        let rel = relations.filter(x => x.id == id);\r\n\r\n        return rel.length == 0 ? Promise.resolve(null) : this.zip.files[\"word/\" + rel[0].target].async(\"base64\");\r\n    }\r\n\r\n    private loadPart(part: PartType, parser: DocumentParser) {\r\n        var f = this.zip.files[part];\r\n\r\n        return f ? f.async(\"string\").then(xml => {\r\n            switch (part) {\r\n                case PartType.FontRelations:\r\n                    this.fontRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.DocumentRelations:\r\n                    this.docRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.NumberingRelations:\r\n                    this.numRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.Style:\r\n                    this.styles = parser.parseStylesFile(xml);\r\n                    break;\r\n\r\n                case PartType.Numbering:\r\n                    this.numbering = parser.parseNumberingFile(xml);\r\n                    break;\r\n\r\n                case PartType.Document:\r\n                    this.document = parser.parseDocumentFile(xml);\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        }) : null;\r\n    }\r\n}\r\n","import {\r\n    IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomRelationship, IDomSubStyle, IDomTableRow, NumberingPicBullet, DocxTab, DomRelationshipType\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { SectionProperties, DocumentElement } from './dom/document';\r\nimport { namespaces, Columns, CommonProperties } from './dom/common';\r\nimport { forEachElementNS, getAttributeLengthValue, getAttributeIntValue, getAttributeBoolValue, getAttributeColorValue, LengthUsage } from './parser/common';\r\nimport { ParagraphElement } from './dom/paragraph';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    ignoreHeight: boolean = true;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentRelationsFile(xmlString: string) {\r\n        var xrels = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        return xml.elements(xrels).map(c => <IDomRelationship>{\r\n            id: xml.stringAttr(c, \"Id\"),\r\n            type: values.valueOfRelType(c),\r\n            target: xml.stringAttr(c, \"Target\"),\r\n        });\r\n    }\r\n\r\n    parseDocumentFile(xmlString: string) {\r\n        var result: DocumentElement = {\r\n            domType: DomType.Document,\r\n            children: [],\r\n            style: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = xml.byTagName(xml.parse(xmlString, this.skipDeclaration), \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = this.parseSectionProperties(elem);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xmlString: string): IDomStyle[] {\r\n        var result = [];\r\n\r\n        var xstyles = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = {\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.byTagName(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.byTagName(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseCommonProperties(elem: Element, props: CommonProperties) {\r\n        if(elem.namespaceURI != namespaces.wordml)\r\n            return;\r\n\r\n        switch(elem.localName) {\r\n            case \"color\": \r\n                props.color = getAttributeColorValue(elem, elem.namespaceURI, \"val\");\r\n                break;\r\n\r\n            case \"sz\":\r\n                props.fontSize = getAttributeLengthValue(elem, elem.namespaceURI, \"val\", LengthUsage.FontSize);\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.className(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xmlString: string): IDomNumbering[] {\r\n        var result = [];\r\n        var xnums = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.byTagName(elem, \"pict\");\r\n        var shape = pict && xml.byTagName(pict, \"shape\");\r\n        var imagedata = shape && xml.byTagName(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseSectionProperties(elem: Element): SectionProperties {\r\n        var section = <SectionProperties>{};\r\n\r\n        forEachElementNS(elem, namespaces.wordml, e => {\r\n            switch(e.localName) {\r\n                case \"pgSz\":\r\n                    section.pageSize = {\r\n                        width: getAttributeLengthValue(e, namespaces.wordml, \"w\"),\r\n                        height: getAttributeLengthValue(e, namespaces.wordml, \"h\"),\r\n                        orientation: e.getAttributeNS(namespaces.wordml, \"orient\")\r\n                    }\r\n                    break;\r\n\r\n                case \"pgMar\":\r\n                    section.pageMargins = {\r\n                        left: getAttributeLengthValue(e, namespaces.wordml, \"left\"),\r\n                        right: getAttributeLengthValue(e, namespaces.wordml, \"right\"),\r\n                        top: getAttributeLengthValue(e, namespaces.wordml, \"top\"),\r\n                        bottom: getAttributeLengthValue(e, namespaces.wordml, \"bottom\"),\r\n                        header: getAttributeLengthValue(e, namespaces.wordml, \"header\"),\r\n                        footer: getAttributeLengthValue(e, namespaces.wordml, \"footer\"),\r\n                        gutter: getAttributeLengthValue(e, namespaces.wordml, \"gutter\"),\r\n                    };\r\n                    break;\r\n\r\n                case \"cols\":\r\n                    section.columns = this.parseColumns(e);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return section;\r\n    }\r\n\r\n    parseColumns(elem: Element): Columns {\r\n        var result = {\r\n            numberOfColumns: getAttributeIntValue(elem, namespaces.wordml, \"num\"),\r\n            space: getAttributeLengthValue(elem, namespaces.wordml, \"space\"),\r\n            separator: getAttributeBoolValue(elem, namespaces.wordml, \"sep\"),\r\n            equalWidth: getAttributeBoolValue(elem, namespaces.wordml, \"equalWidth\", true),\r\n            columns: []\r\n        };\r\n\r\n        forEachElementNS(elem, namespaces.wordml, e => {\r\n            if(e.localName != \"col\")\r\n                return;\r\n\r\n            result.columns.push({\r\n                width: getAttributeLengthValue(elem, namespaces.wordml, \"w\"),\r\n                space: getAttributeLengthValue(elem, namespaces.wordml, \"space\")\r\n            });\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ domType: DomType.Paragraph, children: [], props: {} };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(this.parseBookmark(c));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    this.parseCommonProperties(c, result.props);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"numPr\":\r\n                    this.parseNumbering(c, paragraph);\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"tabs\":\r\n                    this.parseTabs(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseNumbering(node: Element, paragraph: ParagraphElement) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"numId\":\r\n                    paragraph.numberingId = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"ilvl\":\r\n                    paragraph.numberingLevel = xml.intAttr(c, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.style[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseBookmark(node: Element): OpenXmlElement {\r\n        var result: IDomRun = { domType: DomType.Run };\r\n\r\n        result.id = xml.stringAttr(node, \"name\");\r\n\r\n        return result;\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomHyperlink = { domType: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomRun = { domType: DomType.Run, parent: parent };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.text = c.textContent;//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.break = xml.stringAttr(c, \"type\") || \"textWrapping\";\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.tab = true;\r\n                    //result.text = \"\\u00A0\\u00A0\\u00A0\\u00A0\";  // TODO\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: IDomRun) {\r\n        this.parseDefaultProperties(elem, run.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ domType: DomType.Drawing, children: [], style: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.byTagName(n, \"align\");\r\n                        var offsetNode = xml.byTagName(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.style['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.style['text-align'] = posX.align;\r\n                result.style['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.style['display'] = 'block';\r\n            result.style['position'] = 'relative';\r\n            result.style[\"width\"] = \"0px\";\r\n            result.style[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.style[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.style[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.style[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = xml.byTagName(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ domType: DomType.Image, src: \"\", style: {} };\r\n        var blipFill = xml.byTagName(elem, \"blipFill\");\r\n        var blip = xml.byTagName(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = xml.byTagName(elem, \"spPr\");\r\n        var xfrm = xml.byTagName(spPr, \"xfrm\");\r\n\r\n        result.style[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.style[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.style[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { domType: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.style = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.style, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.style[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                table.style[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var vertAnchor = xml.stringAttr(node, \"vertAnchor\");\r\n        var horzAnchor = xml.stringAttr(node, \"horzAnchor\");\r\n        var tblpX = xml.sizeAttr(node, \"tblpX\");\r\n        var tblpY = xml.sizeAttr(node, \"tblpY\");\r\n        var tblpXSpec = xml.stringAttr(node, \"tblpXSpec\");\r\n        var tblpYSpec = xml.stringAttr(node, \"tblpYSpec\");\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.style[\"float\"] = 'left';\r\n        table.style[\"margin-bottom\"] = values.addSize(table.style[\"margin-bottom\"], bottomFromText);\r\n        table.style[\"margin-left\"] = values.addSize(table.style[\"margin-left\"], leftFromText);\r\n        table.style[\"margin-right\"] = values.addSize(table.style[\"margin-right\"], rightFromText);\r\n        table.style[\"margin-top\"] = values.addSize(table.style[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { domType: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { domType: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: IDomStyleValues = null, childStyle: IDomStyleValues = null, handler: (prop: Element) => boolean = null): IDomStyleValues {\r\n        style = style || {};\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: IDomStyleValues) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: IDomStyleValues) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: IDomStyleValues) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: IDomStyleValues) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseTabs(node: Element, paragraph: ParagraphElement) {\r\n        paragraph.tabs = xml.elements(node, \"tab\").map(n => <DocxTab>{\r\n            position: xml.sizeAttr(n, \"pos\"),\r\n            leader: xml.stringAttr(n, \"leader\"),\r\n            style: xml.stringAttr(n, \"val\"),\r\n        });\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: IDomStyleValues) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    static elements(node: Element, tagName: string = null): Element[] {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && (tagName == null || n.localName == tagName))\r\n                result.push(n);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static byTagName(elem: Element, tagName: string): Element {\r\n        for (var i = 0; i < elem.childNodes.length; i++) {\r\n            let n = elem.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && n.localName == tagName)\r\n                return <Element>elem.childNodes[i];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = xml.byTagName(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        var elem = <Element>node;\r\n\r\n        for (var i = 0; i < elem.attributes.length; i++) {\r\n            var attr = elem.attributes.item(i);\r\n\r\n            if (attr.localName == attrName)\r\n                return attr.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n        }\r\n\r\n        return defValue;\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfRelType(c: Element) {\r\n        switch (xml.sizeAttr(c, \"Type\")) {\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\":\r\n                return DomRelationshipType.Settings;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\":\r\n                return DomRelationshipType.Theme;\r\n            case \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\":\r\n                return DomRelationshipType.StylesWithEffects;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\":\r\n                return DomRelationshipType.Styles;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\":\r\n                return DomRelationshipType.FontTable;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\":\r\n                return DomRelationshipType.Image;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\":\r\n                return DomRelationshipType.WebSettings;\r\n        }\r\n\r\n        return DomRelationshipType.Unknown;\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}\r\n","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}","export const namespaces = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: \"px\" | \"pt\" | \"%\"\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}","import { Length } from \"../dom/common\";\r\n\r\nexport function forEachElementNS(elem: Element, namespaceURI: string, callback: (elem: Element) => any) {\r\n    for(let i = 0; i < elem.childNodes.length; i ++) {\r\n        let n = elem.childNodes[i];\r\n\r\n        if(n.nodeType == 1 && n.namespaceURI == namespaceURI)\r\n            callback(<Element>n);\r\n    }\r\n}\r\n\r\nexport function getAttributeIntValue(elem: Element, namespaceURI: string, name: string): number {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? parseInt(val) : null;\r\n}\r\n\r\nexport function getAttributeColorValue(elem: Element, namespaceURI: string, name: string): string {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? `#${val}` : null;\r\n}\r\n\r\nexport function getAttributeBoolValue(elem: Element, namespaceURI: string, name: string, defaultValue: boolean = false): boolean {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n\r\n    if(val == null)\r\n        return defaultValue;\r\n\r\n    return val === \"true\" || val === \"1\";\r\n}\r\n\r\nexport function getAttributeLengthValue(elem: Element, namespaceURI: string, name: string, usage: LengthUsage = LengthUsage.Dxa): Length {\r\n    return parseLength(elem.getAttributeNS(namespaceURI, name), usage);\r\n}\r\n\r\nexport enum LengthUsage {\r\n    Dxa,\r\n    Emu,\r\n    FontSize,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nexport function parseLength(val: string | null, usage: LengthUsage = LengthUsage.Dxa): Length {\r\n    if (!val)\r\n        return null;\r\n\r\n    var num = parseInt(val);\r\n\r\n    switch (usage) {\r\n        case LengthUsage.Dxa: return { value: 0.05 * num, type: \"pt\" };\r\n        case LengthUsage.Emu: return { value: num / 12700, type: \"pt\" };\r\n        case LengthUsage.FontSize: return { value: 0.5 * num, type: \"pt\" };\r\n        case LengthUsage.Border: return { value: 0.125 * num, type: \"pt\" };\r\n        case LengthUsage.Percent: return { value: 0.02 * num, type: \"%\" };\r\n    }\r\n\r\n    return null;\r\n}","import { Document } from './document';\r\nimport { IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun, \r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell } from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement } from './dom/paragraph';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: Document;\r\n    options: Partial<Options>;\r\n\r\n    private digitTest = /^[0-9]/.test;\r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: Document, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Partial<Options>) {\r\n        this.document = document;\r\n        this.options = options;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        this.clearElement(styleContainer);\r\n        this.clearElement(bodyContainer);\r\n\r\n        styleContainer.appendChild(this.htmlDocument.createComment(\"docxjs library predefined styles\"));\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        styleContainer.appendChild(this.htmlDocument.createComment(\"docx document styles\"));\r\n        styleContainer.appendChild(this.renderStyles(document.styles));\r\n\r\n        if (document.numbering) {\r\n            styleContainer.appendChild(this.htmlDocument.createComment(\"docx document numbering styles\"));\r\n            styleContainer.appendChild(this.renderNumbering(document.numbering, styleContainer));\r\n        }\r\n\r\n        var documentElement = this.renderDocument(document.document);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            wrapper.appendChild(documentElement);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            bodyContainer.appendChild(documentElement);\r\n        }\r\n    }\r\n\r\n    clearElement(elem: HTMLElement) {\r\n        while (elem.firstChild) {\r\n            elem.removeChild(elem.firstChild);\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.id = this.processClassName(style.id);\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n\r\n                if (e.domType == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.style = this.copyStyleProperties(table.cellStyle, c.style, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: IDomStyleValues, output: IDomStyleValues, attrs: string[] = null): IDomStyleValues {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    renderDocument(document: DocumentElement): HTMLElement {\r\n        var bodyElement = this.htmlDocument.createElement(\"section\");\r\n\r\n        bodyElement.className = this.className;\r\n\r\n        this.processElement(document);\r\n        this.renderChildren(document, bodyElement);\r\n\r\n        this.renderStyleValues(document.style, bodyElement);\r\n\r\n        if(document.props) {\r\n            var props = document.props;\r\n\r\n            if(props.pageMargins) {\r\n                bodyElement.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                bodyElement.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                bodyElement.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                bodyElement.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if(props.pageSize) {\r\n                if(!this.options.ignoreWidth)\r\n                    bodyElement.style.width = this.renderLength(props.pageSize.width);\r\n                if(!this.options.ignoreHeight)\r\n                    bodyElement.style.height = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if(props.columns && props.columns.numberOfColumns) {\r\n                bodyElement.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                bodyElement.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if(props.columns.separator) {\r\n                    bodyElement.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return bodyElement;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return !l ? null : `${l.value}${l.type}`;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; display: flex; justify-content: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return this.renderStyle(styleText);\r\n    }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n\r\n                styleText += this.styleToString(selector, {\r\n                    \"display\": \"list-item\",\r\n                    \"list-style-position\": \"inside\",\r\n                    \"list-style-type\": \"none\",\r\n                    ...num.style\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(this.renderStyle(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return this.renderStyle(styleText);\r\n    }\r\n\r\n    renderStyle(styleContent: string) {\r\n        var styleElement = document.createElement(\"style\");\r\n        styleElement.type = \"text/css\";\r\n        styleElement.innerHTML = styleContent;\r\n        return styleElement;\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.processStyles(styles);\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.id}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.id} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.id} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return this.renderStyle(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): HTMLElement {\r\n        switch (elem.domType) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<IDomRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): HTMLElement[] {\r\n        var result: HTMLElement[] = null;\r\n\r\n        if (elem.children != null)\r\n            result = elem.children.map(x => this.renderElement(x, elem)).filter(x => x != null);\r\n\r\n        if (into && result)\r\n            for(let x of result)\r\n                into.appendChild(x);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        this.renderCommonProeprties(result, elem.props);\r\n\r\n        if (elem.numberingId && elem.numberingLevel != null) {\r\n            result.className = `${result.className} ${this.numberingClass(elem.numberingId, elem.numberingLevel)}`;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderCommonProeprties(elem: HTMLElement, props: CommonProperties){\r\n        if(props == null)\r\n            return;\r\n\r\n        if(props.color) {\r\n            elem.style.color = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            elem.style.fontSize = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: IDomRun) {\r\n        if (elem.break)\r\n            return this.htmlDocument.createElement(elem.break == \"page\" ? \"hr\" : \"br\");\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if (elem.text)\r\n            result.textContent = elem.text;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.id) {\r\n            result.id = elem.id;\r\n        }\r\n\r\n        if (elem.tab) {\r\n            //TODO\r\n            // result.style.display = \"inline-block\";\r\n\r\n            // var paragraph = <IDomParagraph>elem.parent;\r\n\r\n            // while (paragraph != null && paragraph.domType != DomType.Paragraph)\r\n            //     paragraph = <IDomParagraph>paragraph.parent;\r\n\r\n            // if (paragraph && paragraph.tabs) {\r\n            //     var tab = paragraph.tabs[0];\r\n\r\n            //     result.style.width = tab.position;\r\n\r\n            //     switch (tab.leader) {\r\n            //         case \"dot\":\r\n            //         case \"middleDot\":\r\n            //             result.style.borderBottom = \"1px black dotted\";\r\n            //             break;\r\n\r\n            //         case \"hyphen\":\r\n            //         case \"heavy\":\r\n            //         case \"underscore\":\r\n            //             result.style.borderBottom = \"1px black solid\";\r\n            //             break;\r\n            //     }\r\n            // }\r\n        }\r\n        else if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: IDomStyleValues, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id, lvl) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: IDomStyleValues, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id, lvl) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n}\r\n"],"sourceRoot":""}